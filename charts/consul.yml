# Default values for consul.
# This is a YAML-formatted file.
# Declare name/value pairs to be passed into your templates.
# name: value

## Consul service ports
HttpPort: 8500
RpcPort: 8400
SerflanPort: 8301
SerflanUdpPort: 8301
SerfwanPort: 8302
SerfwanUdpPort: 8302
ServerPort: 8300
ConsulDnsPort: 8600
## Used as selector
Component: "consul"
Replicas: 3
Image: "consul"
ImageTag: "1.0.2"
ImagePullPolicy: "IfNotPresent"
Resources: {}
 # requests:
 #   cpu: "100m"
 #   memory: "256Mi"
 # limits:
 #   cpu: "500m"
 #   memory: "512Mi"
## Persistent volume size
Storage: "10Gi"

## Needed for 0.8.0 and later IF all consul containers are spun up
## on the same machine. Without this they all generate the same
## host id.
DisableHostNodeId: false

## Datacenter name for consul. If not supplied, will use the consul
## default 'dc1'
# DatacenterName: dc1

## Encrypt Gossip traffic
EncryptGossip: true

## StorageClass name for use with Persistent Volume Claim (PVC) using beta notations
# StorageClass:

## Setting maxUnavailable will create a pod disruption budget that will prevent
## voluntarty cluster administration from taking down too many consul pods. If
## you set maxUnavailable, you should set it to ceil((n/2) - 1), where
## n = Replicas. For example, if you have 5 or 6 Replicas, you'll want to set
## maxUnavailable = 2. If you are using the default of 3 Replicas, you'll want
## to set maxUnavailable to 1.
maxUnavailable: 1

## Anti-Affinity setting. The default "hard" will use pod anti-affinity that is
## requiredDuringSchedulingIgnoredDuringExecution to ensure 2 services don't
## end up on the same node. Setting this to "soft" will use
## preferredDuringSchedulingIgnoredDuringExecution. If set to anything else,
## no anti-affinity rules will be configured.
antiAffinity: "hard"

## Enable Consul Web UI
##
ui:
  enabled: false
## Create dedicated UI service
##
uiService:
  enabled: false
  type: "NodePort"

## Create an Ingress for the Web UI
uiIngress:
  enabled: false
# annotations:
#   kubernetes.io/ingress.class: nginx
#   kubernetes.io/tls-acme: 'true'
#   nginx.ingress.kubernetes.io/auth-type: basic
#   nginx.ingress.kubernetes.io/auth-secret: consul-ui-password
#   nginx.ingress.kubernetes.io/auth-realm: "Authentication Required - Consul UI"
# hosts:
#   - consul.k8s.openswitch.net
# tls:
#   - hosts:
#       - "consul.k8s.openswitch.net"
#     secretName: consul-tls

## test container details
test:
  image: lachlanevenson/k8s-kubectl
  imageTag: v1.4.8-bash
